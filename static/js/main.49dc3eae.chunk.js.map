{"version":3,"sources":["Components/Square.js","Components/Board.js","helper/CheckWinner.js","App.js","index.js"],"names":["Square","props","classes","winner","className","onClick","value","Board","console","log","square","renderSquare","i","squares","includes","board","Math","pow","size","j","push","calculateWinner","symbol","chessSize","isColsWin","listwin","length","CheckCols","isRowsWin","CheckRows","isMainDiagonalWin","k","CheckMainDiagonal","isDiagonalWin","CheckDiagonal","App","useState","history","Array","fill","location","x","y","stepNumber","xIsNext","isOrder","chessState","updateState","updatesize","current","historyArr","slice","reverse","status","moves","map","step","move","desc","concat","stepTostep","prevState","jumpTo","Fragment","parseInt","handleClick","type","onChange","event","target","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49dc3eae.chunk.js","sourcesContent":["function Square(props) {\n    let classes = \"square\";\n    if(props.winner)\n    {\n      classes = \"square\" + \" win-item\";\n    }\n    return (\n      <button className={classes} onClick={props.onClick}>\n        {props.value}\n      </button>\n    );\n  }\n\nexport default Square;","import React from \"react\";\nimport Square from \"./Square\"\nconst Board = (props) => {\n    console.log(props.winner)\n    const renderSquare = (i) => {\n      if(props.winner)\n      {return (\n        <Square\n          value={props.squares[i]}\n          winner ={(props.winner.includes(i)) ? true : null}\n          onClick={() => props.onClick(i)}\n        />\n      );}\n      else\n      {\n        return (\n        <Square\n          value={props.squares[i]}\n          onClick={() => props.onClick(i)}\n        />);\n      }\n    }\n    let square;\n    let board=[];\n    for(let i=0;i<Math.pow(props.size,2);i+=+props.size)\n    {\n      square=[];\n      for(let j=0;j<props.size;j++)\n      {\n        square.push(renderSquare(i+j));\n      }\n      board.push(\n        <div key={i} className=\"board-row\">\n\t\t\t\t\t{square}\n\t\t\t\t</div>\n      )\n    }\n    return (\n      <div>\n        {board}\n      </div>\n    );\n  }\n  export default Board;","\nconst MAX_WIN =5;\n\nfunction CheckRows(squares, symbol, chessSize)\n{\n  let listwin=[];\n  for(let i=0;i<chessSize*chessSize;i+=+chessSize)\n  {\n    for(let j=0;j<chessSize;j++)\n    {\n      if(squares[i+j]===symbol)\n      {\n        listwin.push(i+j);\n      }\n      else{\n        if(listwin.length>=MAX_WIN)\n          {\n            return listwin;\n          }\n        listwin=[];\n      }\n    }\n    if(listwin.length>=MAX_WIN)\n    {\n      return listwin;\n    }\n  }\n  return null;\n}\nfunction CheckCols(squares, symbol, chessSize)\n{\n  let listwin=[];\n  for(let i=0;i<chessSize;i++)\n  {\n    for(let j=0;j<chessSize*chessSize;j+=+chessSize)\n    {\n      if(squares[i+j]===symbol)\n      {\n        listwin.push(i+j);\n      }\n      else{\n        if(listwin.length>=MAX_WIN)\n          {\n            return listwin;\n          }\n        listwin=[];\n      }\n    }\n    if(listwin.length>=MAX_WIN)\n          {\n            return listwin;\n          }\n  }\n  return null;\n}\nfunction CheckMainDiagonal(squares, symbol, chessSize)\n{\n  let listwin=[];\n  for(let i=0;i<chessSize-MAX_WIN+1;i++)\n  {\n    let k=0;\n    for(let j=0+i*chessSize;j<chessSize*chessSize;j+=+chessSize)\n    {\n      if(k+j<chessSize*chessSize){\n        if(squares[k+j]===symbol)\n        {\n          listwin.push(k+j);\n        }\n        else{\n          if(listwin.length>=MAX_WIN)\n          {\n            return listwin;\n          }\n          listwin=[];\n        }\n      }\n      else{\n        break;\n      }\n      k++;\n    }\n    if(listwin.length>=MAX_WIN)\n    {\n      return listwin;\n    }\n  }\n  listwin=[];\n  for(let i=1;i<chessSize-MAX_WIN+1;i++)\n  {\n    let k=0;\n    for(let j=0+i;j<chessSize;j++)\n    {\n      if(k+j<chessSize*chessSize){\n          if(squares[k+j]===symbol)\n        {\n          listwin.push(k+j);\n        }\n        else{\n          if(listwin.length>=MAX_WIN)\n          {\n            return listwin;\n          }\n          listwin=[];\n        }\n      }\n      else{\n        break;\n      }\n      k+=+chessSize;\n    }\n    if(listwin.length>=MAX_WIN)\n          {\n            return listwin;\n          }\n  }\n  return null;\n} \n\nfunction CheckDiagonal(squares, symbol, chessSize)\n{\n  let listwin=[];\n  for(let i=0;i<chessSize-MAX_WIN+1;i++)\n  {\n    let k=1;\n    for(let j=0+(i+1)*chessSize;j<=chessSize*chessSize;j+=+chessSize)\n    {\n      if(j-k<chessSize*chessSize){\n          if(squares[j-k]===symbol)\n        {\n          listwin.push(j-k);\n        }\n        else{\n          if(listwin.length>=MAX_WIN)\n          {\n            return listwin;\n          }\n          listwin=[];\n        }\n      }\n      else{\n        break;\n      }\n      k++;\n    }\n    if(listwin.length>=MAX_WIN)\n          {\n            return listwin;\n          }\n  }\n  listwin=[];\n  for(let i=0;i<chessSize-MAX_WIN;i++)\n  {\n    let k=chessSize;\n    for(let j=0+i+1;j<chessSize;j++)\n    {\n      if(k-j-1<chessSize*chessSize){\n          if(squares[k-j-1]===symbol)\n        {\n          listwin.push(k-j-1);\n        }\n        else{\n          if(listwin.length>=MAX_WIN)\n          {\n            return listwin;\n          }\n          listwin=[];\n        }\n      }\n      else{\n        console.log(1)\n        break;\n      }\n      k+=+chessSize;\n    }\n    if(listwin.length>=MAX_WIN)\n          {\n            return listwin;\n          }\n  }\n  return null;\n} \nfunction calculateWinner(squares, symbol, chessSize) {\n  const isColsWin = CheckCols(squares,symbol, chessSize);\n  if(isColsWin)\n  {\n    return isColsWin;\n  }\n  const isRowsWin = CheckRows(squares,symbol, chessSize);\n  if(isRowsWin)\n  {\n    return isRowsWin;\n  }\n  const isMainDiagonalWin = CheckMainDiagonal(squares,symbol, chessSize);\n  if(isMainDiagonalWin)\n  {\n    return isMainDiagonalWin;\n  }\n  const isDiagonalWin = CheckDiagonal(squares,symbol, chessSize);\n  if(isDiagonalWin)\n  {\n    return isDiagonalWin;\n  }\n  return null;\n}\nexport default calculateWinner;","import React, {useState} from \"react\";\nimport Board from \"./Components/Board\";\nimport \"./App.css\"\nimport calculateWinner from \"./helper/CheckWinner\";\nconst App = () => {\n    const [chessState, updateState]= useState({\n      history: [\n        {\n          squares: Array(9).fill(null),\n          location:{x:null, y:null}\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      isOrder: false\n    })\n    const [chessSize, updatesize]= useState(5)\n    const handleClick = (i) => {\n      const history = chessState.history.slice(0, chessState.stepNumber + 1);\n      const current = history[history.length - 1];\n      const squares = current.squares.slice();\n      const symbol = chessState.xIsNext ? 'O':'X';\n      const location = {x: parseInt((i)%+chessSize+1), y:parseInt((i)/+chessSize+1)};\n      if (calculateWinner(squares, symbol,chessSize) || squares[i]) {\n        return;\n      }\n      squares[i] = chessState.xIsNext ? \"X\" : \"O\";\n      updateState((prevState)=>{\n        return{\n        ...prevState,\n        history: history.concat([\n          {\n            squares: squares,\n            location: location\n          }\n        ]),\n        stepNumber: history.length,\n        xIsNext: !chessState.xIsNext}\n      });\n    }\n  \n    const jumpTo= (step) => {\n      updateState((prevState) => {\n        return{\n          ...prevState,\n          stepNumber: step,\n          xIsNext: (step % 2) === 0}\n\n      });\n    }\n    const modeReverse =()=>{\n      updateState((prevState) => {\n        return{\n          ...prevState,\n          isOrder: !chessState.isOrder}\n      });\n    }\n    const PlayAgain =()=>{\n      updateState({\n        history: [\n          {\n            squares: Array(9).fill(null),\n            location:{x:null, y:null}\n          }\n        ],\n        stepNumber: 0,\n        xIsNext: true,\n        isOrder: false\n      })\n\n    }\n\n    const history = chessState.history;\n    const current = history[chessState.stepNumber];\n    const symbol = chessState.xIsNext ? 'O':'X';\n    const winner = calculateWinner(current.squares, symbol, chessSize);\n    const historyArr = chessState.history.slice();\n    if(chessState.isOrder)\n    {\n      historyArr.reverse();\n    }\n    const setSize = (event) =>{\n      if(parseInt(event.target.value) >= 5 && parseInt(event.target.value)<=20)\n      {\n        updatesize(parseInt(event.target.value));\n      }\n    }\n    const moves = historyArr.map((step, move) => {\n      let desc = move ?\n      'Go to move '.concat(`(${step.location.x}: ${step.location.y})`):\n        'Go to game start';\n        if(move===0 && chessState.isOrder)\n        {\n          desc='Go to move '.concat(`(${step.location.x}: ${step.location.y})`);\n        }\n      if(move===historyArr.length-1 && chessState.isOrder)\n      {\n        desc='Go to game start';\n      }\n      let stepTostep = move;\n      if(chessState.isOrder)\n      {\n        stepTostep=historyArr.length-1-move;\n      }\n      return (\n        <li key={stepTostep}>\n          <button \n          className={stepTostep===chessState.stepNumber ? \"bold-item\" : null}\n          onClick={() => jumpTo(stepTostep)}>{desc}\n          </button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + symbol;\n    } else {\n      status = \"Next player: \" + (chessState.xIsNext ? \"X\" : \"O\");\n    }\n    if(!winner && chessState.history.slice(0, chessState.stepNumber + 1).length===chessSize+1 )\n    {\n      status=\"Draw\";\n    }\n\n    return (\n      <React.Fragment>\n      \n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            winner ={winner ? winner : null}\n            size = {chessSize}\n            onClick={i => handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n        <div>\n          <label>Size</label>\n          <input type='text' onChange={setSize} disabled={chessState.history.length>1 ?true:false}></input>\n        </div>\n        <div>\n        <button onClick={()=>{modeReverse()}}>{!chessState.isOrder ? \"Ascending\" : \"Descending\"}</button>\n        </div>\n        <div>\n        <button onClick={()=>{PlayAgain()}}>Play Again</button>\n        </div>\n      </div>\n      </React.Fragment>\n    );\n  }\n\n  export default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}